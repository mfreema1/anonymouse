module.exports = {
    "QUESTION": "question",
    "QUESTION_FORWARD": "question forward",
    "RESPONSE": "response",
    "REJECTION": "rejection",
    "ACCEPTANCE": "acceptance",
    "EXPIRY": "expiry",
    "DISCONNECT": "disconnect",
    "CONFIRMATION": "confirmation",
    "ERROR": "error",
    "LOGIN": "login",
    "LOGIN_RESPONSE": "login response",
    "ROOM_JOIN": "room join",
    "ROOM_GET": "room get"
}

//Proposed message formats and types

//Student to professor
/**
    //we really don't need roomID if people can only be part of
    //one room at a time, but we'll leave it in for now
    {
        type: "question",
        payload: {
            roomID: "",
            username: "",
            message: "", //the question that the student submitted
            datetime: new Date() //these will be strings, after stringification
        }                        //and parse, they are strings
    }
*/

/**
    {
        type: "join room",
        payload: {
            roomID: ""
        }
    }
*/

//Once received, cache the message on the server until we get an
//approval or denial from the professor, max of 30 minutes.  After
//that, expire the message

//Professor response to student, this goes to server
/**
    {
        type: "response", //predetermined types
        payload: {
            roomID: "", //4-letter id generated by us
            messageID: "", //uuidv4
            approved: bool,
            datetime: new Date()
        }
    }
*/

//If the question was rejected, notify the student with this
/**
    {
        type: "rejection",
        payload: {
            message: "",
            messageID: "",
            datetime: "" //when the question was asked
        }
    }
*/

//If the question gets accepted, we don't bother notifying the student,
//as they'll get notified via the publish anyways.

//The message payload will look something like this when published:
/**
    {
        type: "acceptance",
        payload: {
            message: ""
        }
    }
*/

 //Inform the professor that a question has expired, remove
 //from client
/**
    {
        type: "expiry",
        payload: {
            messageID: "" //uuidv4
        }
    }
*/

//Inform the user that they have been disconnected from the room,
//perhaps by signing in from a different IP
/**
    {
        type: "disconnect",
        payload: {
            roomID: "",
            reason: ""
        }
    }
*/

//Notify the user that their question has been received
/**
    {
        type: "question confirmation",
        payload: {
            message: "",
            messageID: ""
        }
    }
*/

//Notify the server that a message was not understood, store this
//for logging purposes
/**
    {
        type: "error",
        payload: { //payload that caused error

        }
    }
*/

//Provide a login attempt to the server.  This must be the first message
//sent to the server
/**
    {
        type: "login",
        "payload": {
            "username": "",
            "password": ""
        }
    }
*/

//Inform the user that their login was successful.
/**
    {
        type: "login response",
        payload: {
            approved: bool
        }
    }
*/

 //